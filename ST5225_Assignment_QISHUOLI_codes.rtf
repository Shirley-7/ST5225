{\rtf1\ansi\ansicpg936\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ##############################Question 1: \
\
###################### (a)\
# 1-(a) (a)	Can you express the graph in Figure 1 as a bipartite graph? \
# That is divide the nodes into 2 groups such that all edges are between the two groups. \
A = matrix(nrow = 15, ncol = 15, data = 0)\
rownames(A) = colnames(A) = c("x1", "x2", "x3", "x4", "x5", "x6", "x7",\
                              "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15")\
A[1,2] = A[1,3] = A[2,4] = A[2,5] = A[4,8] = A[4,9] = A[5,10] = A[5,11] = 1\
A[3,6] = A[3,7] = A[6,12] = A[6,13] = A[7,14] = A[7,15] = 1\
A = A + t(A)\
A\
\
library(igraph)\
graph = graph_from_adjacency_matrix(A, mode = "undirected", weighted = TRUE)\
plot(graph, layout = layout.circle, vertex.color = "lightblue", vertex.size = 30, \
     vertex.label.cex = 1.2, vertex.label.dist = 0.5, edge.width = 1.5,\
     main = "Network Graph")\
\
B = A%*%A\
B\
\
\
\
\
\
##############################Question 3\
\
#model for generating the edges of A\
set.seed(5225)\
y=rnorm(100)\
alist=matrix(nrow=1,ncol=2,data=0)\
\
for(i in 1:99) for(j in (i+1):100)\{\
  p=exp(-6*abs(y[i]-y[j]))\
  success=(runif(1)<p)\
  if(success==1) alist=rbind(alist,c(i,j))\
\}\
\
alist=alist[-1,]\
ell=nrow(alist)\
ell\
\
#creating the matrix A\
A=matrix(nrow=100,ncol=100,data=0)\
for(k in 1:ell) A[alist[k,1],alist[k,2]]=1\
A=A+t(A)\
\
#removing 10% of the edges of A\
bsample=sample(c(1:ell),48,replace=FALSE)\
blist=alist[-bsample,]\
\
#creating the matrix of B\
B=matrix(nrow=100,ncol=100,data=0)\
blength=nrow(blist)\
for(k in 1:blength) B[blist[k,1],blist[k,2]]=1\
B=B+t(B)\
\
#using B^2 for link prediction\
C=B%*%B\
pred=C*(1-B)*(1-diag(100))\
sort(-pred)[1:96]\
\
#predicting 39 of the missing edges to be those with the largest entries\
#of B^2 in which b_ij=0 and i not equal to j.\
\
sum((pred>5)*A)/2\
\
#we only got 8 out of the 39 predictions correct.\
#but keep in mind that there are 4515 non-edge node pairs in B and\
#only 48 of them are edges in A\
\
################# (a)\
library(expm)\
alphas = c(0.4, 0.65)\
for (alpha in alphas) \{\
  D = expm::expm(alpha * A)\
  pred_a = D * (1 - B) * (1-diag(100))\
  sort(-pred_a)[1:96]\
  correct_predictions = sum((pred_a > 5) * A)/2\
  cat("Alpha =", alpha, "Correct Predictions =", correct_predictions, "\\n")\
\}\
\
################# (c)\
node_degrees = colSums(B)\
s = matrix(nrow=100, ncol=100, data=0)\
for (i in 1:100) \{\
  for (j in 1:100) \{\
    s[i, j] = node_degrees[i] * node_degrees[j]\
  \}\
\}\
pred_c = s * (1 - A) * (1-diag(100))\
sort(-pred_c)[1:39]\
correct_predictions_c = sum((pred_c > 5) * A)/2\
correct_predictions\
\
\
\
\
\
##############################Question 4\
\
set.seed(5225)\
A2=matrix(nrow=90,ncol=90,data=0)\
x2=c(rep(1,times=30),rep(2,times=30),rep(3,times=30))\
for(i in 1:89) for(j in (i+1):90)\{\
  if(x2[i]==x2[j]) A2[i,j]=(runif(1)<0.5)+0\
  if(x2[i]!=x2[j]) A2[i,j]=(runif(1)<0.1)+0\
\}\
\
A2=A2+t(A2)\
library(ergm)\
A2.network=as.network(A2,directed=FALSE)\
A2.network%v%"xval"=x2\
A2.network\
\
############### (a)\
library(igraph)\
graph = graph_from_adjacency_matrix(A2, mode = "undirected")\
#plot(graph, vertex.color = "lightblue", vertex.size = 2, \
#    vertex.label.cex = 1.2, vertex.label.dist = 0.5, edge.width = 1.5,\
#   main = "Network Graph")\
\
transitivity_value = transitivity(graph)\
print(transitivity_value)\
\
density_value = edge_density(graph)\
print(paste("Density:", density_value))\
\
# Method 2: alculate directly\
# n = nrow(A2)\
# num_edges = sum(A2) / 2\
# total_possible_edges = n * (n - 1) / 2\
# density = num_edges / total_possible_edges\
# print(density)\
\
############### (b)\
num_simulations = 999\
n = nrow(A2)\
generate_random_graph = function(A2) \{\
  degree_sequence = degree(graph_from_adjacency_matrix(A2, mode = "undirected"))\
  random_graph = sample_degseq(degree_sequence, method = "vl")\
  return(random_graph)\
\}\
num_greater_transitivity = 0\
for (i in 1:num_simulations) \{\
  random_graph = generate_random_graph(A2)\
  random_transitivity = transitivity(random_graph)\
  if (random_transitivity >= transitivity_value) \{\
    num_greater_transitivity = num_greater_transitivity + 1\
  \}\
\}\
monte_carlo_p_value = num_greater_transitivity / num_simulations\
monte_carlo_p_value\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ############### (c)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 A2.indep=ergm(A2.network ~ edges + match("xval"))\
summary(A2.indep)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ############### (d)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 A2.ergm = ergm(A2.network ~ edges + gwesp(1.1, fixed = TRUE) + gwdsp(2, fixed = TRUE))\
summary(A2.ergm)\
#A2.ergm=ergm(A2.network~edges+kstar(2)+degree(1))\
#summary(A2.ergm)\
#mcmc.diagnostics(A2.ergm)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ############### (e)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 summary(A2.network~edges+gwesp(1.1,fixed=TRUE)+gwdegree(2,fixed=TRUE)+triangle+kstar(2))\
N=90*89/2\
exp(1.1)*(1-(1-exp(-1.1))^88)*N\
exp(2)*(1-(1-exp(-2))^89)*90\
alpha=exp(2)*(1-(1-exp(-2))^c(1:6))\
alpha\
inc=alpha[2:6]-alpha[1:5]\
inc\
A2.dep=formula(A2.network~edges+gwesp(1.1,fixed=TRUE)+gwdegree(2,fixed=TRUE)+nodematch("xval"))\
summary(A2.dep)\
set.seed(2)\
laz.ergm=ergm(A2.dep)\
summary(laz.ergm)\
\
\
\
\
\
##############################Question 5\
\
#model for generating the edges of A\
set.seed(5225)\
y=rnorm(100)\
alist=matrix(nrow=1,ncol=2,data=0)\
\
for(i in 1:99) for(j in (i+1):100)\{\
  p=exp(-6*abs(y[i]-y[j]))\
  success=(runif(1)<p)\
  if(success==1) alist=rbind(alist,c(i,j))\
\}\
\
alist=alist[-1,]\
ell=nrow(alist)\
ell\
\
#creating the matrix A\
A=matrix(nrow=100,ncol=100,data=0)\
for(k in 1:ell) A[alist[k,1],alist[k,2]]=1\
A=A+t(A)\
\
#removing 10% of the edges of A\
bsample=sample(c(1:ell),48,replace=FALSE)\
blist=alist[-bsample,]\
\
#creating the matrix of B\
B=matrix(nrow=100,ncol=100,data=0)\
blength=nrow(blist)\
for(k in 1:blength) B[blist[k,1],blist[k,2]]=1\
B=B+t(B)\
\
#using B^2 for link prediction\
C=B%*%B\
pred=C*(1-B)*(1-diag(100))\
sort(-pred)[1:96]\
\
#predicting 39 of the missing edges to be those with the largest entries\
#of B^2 in which b_ij=0 and i not equal to j.\
\
sum((pred>5)*A)/2\
\
#we only got 8 out of the 39 predictions correct.\
#but keep in mind that there are 4515 non-edge node pairs in B and\
#only 48 of them are edges in A\
\
############################ (a)\
A.lap = diag(rowSums(A)) - A\
lambda = eigen(A.lap)\
isolated_nodes = which(rowSums(A) == 0)\
x = rep(0, 100)\
lambda_x = lambda$values[abs(lambda$values) > 1e-10]\
i = which.min(abs(lambda_x))\
min_eigenvector = lambda$vectors[, i]\
non_n = setdiff(1:100, isolated_nodes)\
x[non_n] = min_eigenvector[non_n]\
x\
\
############################ (b)\
corr = cor(x, y)\
fisher = 0.5 * log((1 + corr) / (1 - corr))\
n = 100 - sum(is.na(x))\
se = 1 / sqrt(n - 3)\
z = fisher / se\
p_value = 2 * (1 - pnorm(abs(z)))\
corr\
p_value\
\
\
}